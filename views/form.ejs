<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= service.title %> - eGouv Gabon</title>

    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=EB+Garamond:wght@400;500;700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- NOUVEAU : SweetAlert2 pour des alertes modernes -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link rel="stylesheet" href="/css/form-style.css">
    
    <style>
        /* Style personnalisé pour SweetAlert en thème sombre */
        .swal2-popup {
            background-color: #161b22 !important;
            color: #c9d1d9 !important;
            border: 1px solid #30363d;
        }
        .swal2-title {
            color: #ffffff !important;
        }
        .swal2-html-container {
             color: #c9d1d9 !important;
        }
    </style>
</head>
<body class="antialiased">

    <div class="container mx-auto px-4 py-8">
        <div class="mb-10 text-center">
            <i class="fas <%= service.icon %> text-5xl text-blue-400 mb-4"></i>
            <h1 class="text-4xl lg:text-5xl font-bold text-white mb-2"><%= service.title %></h1>
            <p class="text-gray-400">Remplissez les champs et visualisez le document en temps réel.</p>
        </div>

        <div class="flex flex-col lg:flex-row gap-8">
            <!-- Document Preview Section -->
            <div class="document-preview-card w-full lg:w-3/5 rounded-lg p-4">
                <div class="certificate-container">
                    <img src="/img/coat_of_arms.jpg" class="watermark" alt="Armoiries du Gabon">
                    <div class="certificate-border">
                        <%- service.preview_html %>
                    </div>
                </div>
            </div>

            <!-- Form Section -->
            <div class="form-card w-full lg:w-2/5 rounded-lg p-6 sm:p-8">
                <form id="dynamic-form" novalidate>
                    <% service.fields.forEach(field => { %>
                        <div class="mb-4">
                            <label for="<%= field.id %>" class="form-label block mb-2 text-sm font-medium">
                                <%= field.label %>
                                <% if (field.required) { %><span class="text-red-500">*</span><% } %>
                            </label>
                            <% if (field.type === 'select') { %>
                                <select id="<%= field.id %>" name="<%= field.id %>" class="form-select w-full p-2.5 rounded-md" data-target="<%= field.preview_id %>" <%= field.required ? 'required' : '' %>>
                                    <option value="">-- Veuillez choisir --</option>
                                    <% field.options.forEach(option => { %>
                                        <option value="<%= option %>"><%= option %></option>
                                    <% }); %>
                                </select>
                            <% } else if (field.type === 'textarea') { %>
                                <textarea id="<%= field.id %>" name="<%= field.id %>" rows="4" class="form-textarea w-full p-2.5 rounded-md" placeholder="<%= field.exemple || '' %>" data-target="<%= field.preview_id %>" <%= field.required ? 'required' : '' %>></textarea>
                            <% } else { %>
                                <input type="<%= field.type %>" id="<%= field.id %>" name="<%= field.id %>" class="form-input w-full p-2.5 rounded-md" placeholder="<%= field.exemple || '' %>" data-target="<%= field.preview_id %>" <%= field.required ? 'required' : '' %> <%= field.pattern ? `data-pattern="${field.pattern}"` : '' %>>
                            <% } %>
                            <div class="error-message text-red-400 text-sm mt-1"></div>
                        </div>
                    <% }); %>
                    <div class="mt-8 pt-6 border-t border-gray-700 flex justify-end gap-4">
                        <a href="/" class="btn-secondary font-bold py-3 px-6 rounded-md">Retour au portail</a>
                        <button type="submit" class="btn-primary font-bold py-3 px-6 rounded-md">Soumettre la demande</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Logique de prévisualisation (inchangée) ---
            const allInputs = document.querySelectorAll('.form-card input, .form-card select, .form-card textarea');
            allInputs.forEach(input => {
                input.addEventListener('input', () => {
                    const targetId = input.dataset.target;
                    const previewElement = document.getElementById(targetId);
                    if (previewElement) {
                        let value = input.value;
                        if (value) {
                             if (previewElement.firstChild?.classList?.contains('placeholder')) {
                                previewElement.innerHTML = ''; 
                            }
                            if (input.type === 'date') {
                                try {
                                    const date = new Date(value);
                                    previewElement.textContent = date.toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' });
                                } catch (e) {
                                    previewElement.textContent = value;
                                }
                            } else {
                                previewElement.textContent = value;
                            }
                        } else {
                            const label = document.querySelector(`label[for='${input.id}']`);
                            const placeholderText = label ? `[${label.textContent.replace('*', '').trim()}]` : '[Valeur]';
                            previewElement.innerHTML = `<span class="placeholder">${placeholderText}</span>`;
                        }
                    }
                });
            });


            // --- Logique de soumission de formulaire (AVEC SWEETALERT) ---
            const form = document.getElementById('dynamic-form');
            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                // --- Logique de validation personnalisée (inchangée) ---
                let isFormValid = true;
                const inputsToValidate = form.querySelectorAll('input, select, textarea');
                inputsToValidate.forEach(input => {
                    input.classList.remove('border-red-500');
                    const errorDiv = input.nextElementSibling;
                    if (errorDiv && errorDiv.classList.contains('error-message')) errorDiv.textContent = '';
                });
                for (const input of inputsToValidate) {
                    const errorDiv = input.nextElementSibling;
                    let isValid = true;
                    if (input.required && !input.value.trim()) {
                        isValid = false;
                        if (errorDiv) errorDiv.textContent = 'Ce champ est obligatoire.';
                    }
                    const pattern = input.getAttribute('data-pattern');
                    if (isValid && pattern && input.value.trim()) {

                        let cleanPattern = pattern.trim();
                        // On retire les guillemets simples ou doubles au début et à la fin s'ils existent
                        if ((cleanPattern.startsWith('"') && cleanPattern.endsWith('"')) || (cleanPattern.startsWith("'") && cleanPattern.endsWith("'"))) {
                            cleanPattern = cleanPattern.substring(1, cleanPattern.length - 1);
                        }

                        const regex = new RegExp(cleanPattern);
                        if (!regex.test(input.value)) {
                            isValid = false;
                            if (errorDiv) errorDiv.textContent = `Format invalide. Exemple : ${input.placeholder}`;
                        }
                    }
                    if (!isValid) {
                        isFormValid = false;
                        input.classList.add('border-red-500');
                    }
                }
                if (!isFormValid) return;
                
                // --- Logique de soumission ---
                const submitButton = form.querySelector('button[type="submit"]');
                const originalButtonContent = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = `<i class="fas fa-spinner fa-spin mr-2"></i>Soumission...`;

                const formData = new FormData(form);
                const formJson = Object.fromEntries(formData.entries());
                const payload = {
                    service_title: '<%= service.title %>',
                    form_json: formJson
                };

                try {
                    const response = await fetch('/api/submissions', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.message || 'Une erreur inconnue est survenue.');

                    // ALERTE DE SUCCÈS
                    Swal.fire({
                        title: 'Succès !',
                        text: 'Votre demande a été soumise avec succès. Vous allez être redirigé vers la page d\'accueil.',
                        icon: 'success',
                        background: '#161b22',
                        color: '#c9d1d9',
                        confirmButtonColor: '#4a90e2',
                        timer: 3000,
                        timerProgressBar: true,
                        willClose: () => {
                            window.location.href = '/';
                        }
                    });

                } catch (error) {
                    console.error('Erreur:', error);
                    // ALERTE D'ERREUR
                    Swal.fire({
                        title: 'Échec de la soumission',
                        text: error.message,
                        icon: 'error',
                        background: '#161b22',
                        color: '#c9d1d9',
                        confirmButtonText: 'Réessayer',
                        confirmButtonColor: '#e74c3c',
                    });
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonContent;
                }
            });
        });
    </script>
</body>
</html>

